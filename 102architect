#!/usr/bin/env python3
##
## EPITECH PROJECT, 2020
## 102architect
## File description:
## calculates 2D transformation
##

import math
import sys

def reflexion(x):
    x = x * (math.pi/180)
    return([[math.cos(2 * x), math.sin(2 * x), (0.0)],
            [math.sin(2 * x), -math.cos(2 * x), (0.0)],
            [(0.0), (0.0), (1.0)]])

def rotation(x):
    x = x * (math.pi/180)
    return([[math.cos(x), -math.sin(x), (0.0)],
            [math.sin(x), math.cos(x), (0.0)],
            [(0.0), (0.0), (1.0)]])

def scaling(x, y):
    return([[float(x), (0.0), (0.0)],
	    [(0.0), float(y), (0.0)],
            [(0.0), (0.0), (1.0)]])

def translation(x, y):
    return([[(1.0), (0.0), float(x)],
	    [(0.0), (1.0), float(y)],
            [(0.0), (0.0), (1.0)]])

def create_identity():
    return([[(1.0), (0.0), (0.0)],
            [(0.0), (1.0), (0.0)],
            [(0.0), (0.0), (1.0)]])

def matrix_mult(A, B):
    mat = create_identity()
    for i in range(0, 3):
        for j in range(0, 3):
            mat[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j]
    return(mat)

def vect_mult(A, v):
    vect = [0.0, 0.0, 0.0]
    for i in range(0, 3):
        vect[i] = A[i][0] * v[0] + A[i][1] * v[1] + A[i][2] * v[2]
    return(vect)

def check_ops(i, case):
    if case == 0:
        try:
            x = float(sys.argv[i + 1])
            y = float(sys.argv[i + 2])
            return (x, y)
        except:
            sys.exit (84)
    if case == 1:
        try:
            return(float(sys.argv[i + 1]))
        except:
            sys.exit (84)

if len(sys.argv) == 2 and  sys.argv[1] == "-h":
    print("USAGE\n   ./102architect x y transfo1 arg11 [arg12] [transfo2 arg12 [arg22]] ...\n\nDESCRIPTION\n   x   abscissa of the original point\n   y   ordinate of the original point\n\n   transfo arg1 [arg2]\n   -t i j  translation along vector (i, j)\n   -z m n  scaling by factors m (x-axis) and n (y-axis)\n   -r d    rotation centered in O by a d degree angle\n   -s d    reflection over the axis passing through O with an inclination\n           angle of d degrees")
elif len(sys.argv) >= 4:
    matrix = create_identity()
    try:
        x = int(sys.argv[1])
        y = int(sys.argv[2])
        point = [x, y, 1]
    except:
        sys.exit (84)
    i = 3
    while i < len(sys.argv):
        op = sys.argv[i]
        if op == "-t":
            n, m = check_ops(i, 0)
            matrix = matrix_mult(translation(n, m), matrix)
            print("Translation along vector (", n, ", ", m, ")", sep= '')
            i += 3
        elif op == "-z":
            n, m = check_ops(i, 0)
            matrix = matrix_mult(scaling(n, m), matrix)
            print("Scaling by factors", n, "and", m)
            i += 3
        elif op == "-r":
            n = check_ops(i, 1)
            matrix = matrix_mult(rotation(n), matrix)
            print("Rotation by a", n, "degree angle")
            i += 2
        elif op == "-s":
            n = check_ops(i, 1)
            matrix = matrix_mult(reflexion(n), matrix)
            print("Reflection over an axis with an inclination angle of", int(n), "degrees")
            i += 2
        else:
            sys.exit (84)
    for i in range(0, 3):
        print("%.2f   %.2f   %.2f" %(matrix[i][0], matrix[i][1], matrix[i][2]))
        vect = vect_mult(matrix, point)
    print("(%.2f, %.2f) => (%.2f, %.2f)" %(point[0], point[1], vect[0], vect[1]))
else:
    sys.exit (84)
sys.exit (0)

